// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/

"use strict";



	function buildLogicalExpression(head, tail) {
		return tail.reduce(function(result, element) {
			return {
				type: "LogicalBinary",
				operator: element[1],
				left: result,
				right: element[3]
			};
		}, head);
	}

	function buildUnaryExpression(not, query) {
		if (not) {
			return {
				type: "LogicalUnary",
				operator: "!",
				expr: query
			};
		} else {
			return query;
		}
	}

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { JsonpathQuery: peg$parseJsonpathQuery };
  var peg$startRuleFunction = peg$parseJsonpathQuery;

  var peg$c0 = "$";
  var peg$c1 = "\"";
  var peg$c2 = "'";
  var peg$c3 = "\\";
  var peg$c4 = "b";
  var peg$c5 = "f";
  var peg$c6 = "n";
  var peg$c7 = "r";
  var peg$c8 = "t";
  var peg$c9 = "/";
  var peg$c10 = "u";
  var peg$c11 = "d";
  var peg$c12 = "*";
  var peg$c13 = "0";
  var peg$c14 = "-";
  var peg$c15 = ":";
  var peg$c16 = "?";
  var peg$c17 = "||";
  var peg$c18 = "&&";
  var peg$c19 = "(";
  var peg$c20 = ")";
  var peg$c21 = "!";
  var peg$c22 = "@";
  var peg$c23 = "==";
  var peg$c24 = "!=";
  var peg$c25 = "<=";
  var peg$c26 = ">=";
  var peg$c27 = "[";
  var peg$c28 = "]";
  var peg$c29 = ".";
  var peg$c30 = "-0";
  var peg$c31 = "e";
  var peg$c32 = "true";
  var peg$c33 = "false";
  var peg$c34 = "null";
  var peg$c35 = ",";
  var peg$c36 = "..";

  var peg$r0 = /^[\t-\n\r ]/;
  var peg$r1 = /^[ -!#-&(-[\]-\uD7FF\uE000-\uFFFF]/;
  var peg$r2 = /^[\uD800-\uDBFF]/;
  var peg$r3 = /^[\uDC00-\uDFFF]/;
  var peg$r4 = /^[ABCEF]/i;
  var peg$r5 = /^[0-7]/;
  var peg$r6 = /^[89AB]/i;
  var peg$r7 = /^[CDEF]/i;
  var peg$r8 = /^[ABCDEF]/i;
  var peg$r9 = /^[1-9]/;
  var peg$r10 = /^[<>]/;
  var peg$r11 = /^[\-+]/;
  var peg$r12 = /^[0-9_a-z]/;
  var peg$r13 = /^[a-z]/;
  var peg$r14 = /^[_\x80-\uD7FF\uE000-\uFFFF]/;
  var peg$r15 = /^[0-9]/;
  var peg$r16 = /^[a-z]/i;

  var peg$e0 = peg$classExpectation([["\t", "\n"], "\r", " "], false, false);
  var peg$e1 = peg$literalExpectation("$", false);
  var peg$e2 = peg$literalExpectation("\"", false);
  var peg$e3 = peg$literalExpectation("'", false);
  var peg$e4 = peg$literalExpectation("\\", false);
  var peg$e5 = peg$classExpectation([[" ", "!"], ["#", "&"], ["(", "["], ["]", "\uD7FF"], ["\uE000", "\uFFFF"]], false, false);
  var peg$e6 = peg$classExpectation([["\uD800", "\uDBFF"]], false, false);
  var peg$e7 = peg$classExpectation([["\uDC00", "\uDFFF"]], false, false);
  var peg$e8 = peg$literalExpectation("b", false);
  var peg$e9 = peg$literalExpectation("f", false);
  var peg$e10 = peg$literalExpectation("n", false);
  var peg$e11 = peg$literalExpectation("r", false);
  var peg$e12 = peg$literalExpectation("t", false);
  var peg$e13 = peg$literalExpectation("/", false);
  var peg$e14 = peg$literalExpectation("u", false);
  var peg$e15 = peg$classExpectation(["A", "B", "C", "E", "F"], false, true);
  var peg$e16 = peg$literalExpectation("D", true);
  var peg$e17 = peg$classExpectation([["0", "7"]], false, false);
  var peg$e18 = peg$classExpectation(["8", "9", "A", "B"], false, true);
  var peg$e19 = peg$classExpectation(["C", "D", "E", "F"], false, true);
  var peg$e20 = peg$classExpectation(["A", "B", "C", "D", "E", "F"], false, true);
  var peg$e21 = peg$literalExpectation("*", false);
  var peg$e22 = peg$literalExpectation("0", false);
  var peg$e23 = peg$literalExpectation("-", false);
  var peg$e24 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e25 = peg$literalExpectation(":", false);
  var peg$e26 = peg$literalExpectation("?", false);
  var peg$e27 = peg$literalExpectation("||", false);
  var peg$e28 = peg$literalExpectation("&&", false);
  var peg$e29 = peg$literalExpectation("(", false);
  var peg$e30 = peg$literalExpectation(")", false);
  var peg$e31 = peg$literalExpectation("!", false);
  var peg$e32 = peg$literalExpectation("@", false);
  var peg$e33 = peg$literalExpectation("==", false);
  var peg$e34 = peg$literalExpectation("!=", false);
  var peg$e35 = peg$literalExpectation("<=", false);
  var peg$e36 = peg$literalExpectation(">=", false);
  var peg$e37 = peg$classExpectation(["<", ">"], false, false);
  var peg$e38 = peg$literalExpectation("[", false);
  var peg$e39 = peg$literalExpectation("]", false);
  var peg$e40 = peg$literalExpectation(".", false);
  var peg$e41 = peg$literalExpectation("-0", false);
  var peg$e42 = peg$literalExpectation("e", true);
  var peg$e43 = peg$classExpectation(["-", "+"], false, false);
  var peg$e44 = peg$literalExpectation("true", false);
  var peg$e45 = peg$literalExpectation("false", false);
  var peg$e46 = peg$literalExpectation("null", false);
  var peg$e47 = peg$classExpectation([["0", "9"], "_", ["a", "z"]], false, false);
  var peg$e48 = peg$classExpectation([["a", "z"]], false, false);
  var peg$e49 = peg$literalExpectation(",", false);
  var peg$e50 = peg$classExpectation(["_", ["\x80", "\uD7FF"], ["\uE000", "\uFFFF"]], false, false);
  var peg$e51 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e52 = peg$classExpectation([["a", "z"]], false, true);
  var peg$e53 = peg$literalExpectation("..", false);

  var peg$f0 = function(segments) {
			return { 
				type: "Root", 
				segments: segments
			};
		};
  var peg$f1 = function(literal) {
	return { 
		type: "NameSelector",
		member: literal
	}; 
};
  var peg$f2 = function(literals) { return literals.join(''); };
  var peg$f3 = function(literals) { return literals.join(''); };
  var peg$f4 = function() { return "\b"};
  var peg$f5 = function() { return "\f"};
  var peg$f6 = function() { return "\n"};
  var peg$f7 = function() { return "\r"};
  var peg$f8 = function() { return "\t"};
  var peg$f9 = function() { return "/"};
  var peg$f10 = function() { return "\\"};
  var peg$f11 = function(chars) { return String.fromCharCode(...chars); };
  var peg$f12 = function(code) { return [code]; };
  var peg$f13 = function(pair) { return pair; };
  var peg$f14 = function() { return parseInt(text(), 16); };
  var peg$f15 = function() { return parseInt(text(), 16); };
  var peg$f16 = function() { return parseInt(text(), 16); };
  var peg$f17 = function() { return parseInt(text(), 16); };
  var peg$f18 = function() { return { type: "WildcardSelector" } };
  var peg$f19 = function(index) { return { type: "IndexSelector", index: index } };
  var peg$f20 = function() { return 0; };
  var peg$f21 = function() {
			const number =	parseInt(text());
			if (Number.MIN_SAFE_INTEGER <= number && number <= Number.MAX_SAFE_INTEGER) {
				return number;
			} else {
				throw new Error(`Index must be within the range of I-JSON: ${number}`);
			}
		};
  var peg$f22 = function(start, end, step) {
	return {
		type: "SliceSelector",
		start: start,
		end: end,
		step: step
	}
};
  var peg$f23 = function(expr) { return { type: "FilterSelector", expr: expr } };
  var peg$f24 = function(head, tail) {
	return buildLogicalExpression(head, tail);
};
  var peg$f25 = function(head, tail) {
	return buildLogicalExpression(head, tail);
};
  var peg$f26 = function(not, expr) {
	if (not) {
		return {
			type: "LogicalUnary",
			operator: "!",
			expr: expr
		};
	}

	return expr;
};
  var peg$f27 = function(not, query) {
	return buildUnaryExpression(not, {
		type: "TestExpr",
		query: query,
	});
};
  var peg$f28 = function(segments) {
	return {
		type: 'CurrentNode',
		segments: segments
	}
};
  var peg$f29 = function(left, op, right) {
	return {
		type: "ComparisonExpr",
		left: left,
		operator: op,
		right: right
	}
};
  var peg$f30 = function(literal) {
	return {
		type: "Literal",
		member: literal
	}
};
  var peg$f31 = function(segments) {
	return {
		type: 'CurrentNode',
		segments: segments
	}
};
  var peg$f32 = function(segments) {
	return { 
		type: "Root",
		segments: segments
	}
};
  var peg$f33 = function(segment) {
	return segment;
};
  var peg$f34 = function(selector) { return [selector]; };
  var peg$f35 = function(selector) { return [selector]; };
  var peg$f36 = function(selector) { return [selector]; };
  var peg$f37 = function(int, frac, exp) {
	return parseFloat(`${int}${frac ?? ''}${exp ? `e${exp}` : ''}`);
};
  var peg$f38 = function(sign, digits) {
	return parseInt(`${sign || ''}${digits.join('')}`);
};
  var peg$f39 = function() {
	return true;
};
  var peg$f40 = function() {
	return false;
};
  var peg$f41 = function() {
	return null;
};
  var peg$f42 = function(name, args) {
	const head = args[0];
	const tail = args[1];
	return {
		type: "FunctionExpr",
		name: name,
		args: [head].concat(tail)
	}
};
  var peg$f43 = function(selector) { return [selector]; };
  var peg$f44 = function(head, tail) {
	return [head].concat(tail);
};
  var peg$f45 = function() { 
	return { 
		type: "MemberNameShorthand",
		member: text()
	};
};
  var peg$f46 = function(selectors) {
	if (Array.isArray(selectors)) {
		return {
			type: "DescendantSegment",
			selectors: selectors
		};
	} else {
		return {
			type: "DescendantSegment",
			selectors: [selectors]
		};
	}
};
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseJsonpathQuery() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRootIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSegments();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSegments() {
    var s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseS();
    s3 = peg$parseSegment();
    if (s3 !== peg$FAILED) {
      s1 = s3;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parseS();
      s3 = peg$parseSegment();
      if (s3 !== peg$FAILED) {
        s1 = s3;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseS() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseB();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseB();
    }

    return s0;
  }

  function peg$parseB() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r0.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseRootIdentifier() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 36) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseSelector() {
    var s0;

    s0 = peg$parseNameSelector();
    if (s0 === peg$FAILED) {
      s0 = peg$parseWildcardSelector();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSliceSelector();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIndexSelector();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFilterSelector();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNameSelector() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStringLiteral() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDoubleQuoted();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDoubleQuoted();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c2;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSingleQuoted();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSingleQuoted();
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDoubleQuoted() {
    var s0, s1, s2;

    s0 = peg$parseUnescaped();
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c2;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseESC();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c1;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s2 !== peg$FAILED) {
            s0 = s2;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseESC();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEscapable();
            if (s2 !== peg$FAILED) {
              s0 = s2;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSingleQuoted() {
    var s0, s1, s2;

    s0 = peg$parseUnescaped();
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c1;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseESC();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c2;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s2 !== peg$FAILED) {
            s0 = s2;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseESC();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEscapable();
            if (s2 !== peg$FAILED) {
              s0 = s2;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseESC() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseUnescaped() {
    var s0, s1, s2, s3;

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = input.charAt(peg$currPos);
      if (peg$r2.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseEscapable() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 98) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 102) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f5();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 110) {
          s1 = peg$c6;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f6();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 114) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f7();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 116) {
              s1 = peg$c8;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e12); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f8();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 47) {
                s1 = peg$c9;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f9();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s1 = peg$c3;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f10();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 117) {
                    s2 = peg$c10;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e14); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseHexchar();
                    if (s3 !== peg$FAILED) {
                      s1 = s3;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f11(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseHexchar() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNonSurrogate();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseHighSurrogate();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 117) {
            s4 = peg$c10;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLowSurrogate();
            if (s5 !== peg$FAILED) {
              s1 = [ s2, s5 ];
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f13(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseNonSurrogate() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGIT();
    if (s2 === peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r4.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseHEXDIG();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (s4.length >= 3) {
          s5 = peg$FAILED;
        } else {
          s5 = peg$parseHEXDIG();
        }
      }
      if (s4.length < 3) {
        peg$currPos = s3;
        s3 = peg$FAILED;
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = input.charAt(peg$currPos);
      if (s2.toLowerCase() === peg$c11) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r5.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseHEXDIG();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (s5.length >= 2) {
              s6 = peg$FAILED;
            } else {
              s6 = peg$parseHEXDIG();
            }
          }
          if (s5.length < 2) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f15();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseHighSurrogate() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c11) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r6.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseHEXDIG();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (s4.length >= 2) {
            s5 = peg$FAILED;
          } else {
            s5 = peg$parseHEXDIG();
          }
        }
        if (s4.length < 2) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLowSurrogate() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c11) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r7.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseHEXDIG();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (s4.length >= 2) {
            s5 = peg$FAILED;
          } else {
            s5 = peg$parseHEXDIG();
          }
        }
        if (s4.length < 2) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXDIG() {
    var s0;

    s0 = peg$parseDIGIT();
    if (s0 === peg$FAILED) {
      s0 = input.charAt(peg$currPos);
      if (peg$r8.test(s0)) {
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
    }

    return s0;
  }

  function peg$parseWildcardSelector() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIndexSelector() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseint();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c14;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseDIGIT1();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseDIGIT();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseDIGIT();
        }
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f21();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseDIGIT1() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r9.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseSliceSelector() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseint();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseS();
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c15;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseS();
      s4 = peg$currPos;
      s5 = peg$parseint();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseS();
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s6 = peg$c15;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$currPos;
        s8 = peg$parseS();
        s9 = peg$parseint();
        if (s9 !== peg$FAILED) {
          s7 = s9;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s5 = s7;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f22(s1, s4, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFilterSelector() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 63) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseS();
      s3 = peg$parseLogicalOrExpr();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicalOrExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLogicalAndExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseS();
      if (input.substr(peg$currPos, 2) === peg$c17) {
        s5 = peg$c17;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseS();
        s7 = peg$parseLogicalAndExpr();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseS();
        if (input.substr(peg$currPos, 2) === peg$c17) {
          s5 = peg$c17;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseS();
          s7 = peg$parseLogicalAndExpr();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f24(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicalAndExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseBasicExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseS();
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s5 = peg$c18;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseS();
        s7 = peg$parseBasicExpr();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseS();
        if (input.substr(peg$currPos, 2) === peg$c18) {
          s5 = peg$c18;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseS();
          s7 = peg$parseBasicExpr();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f25(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBasicExpr() {
    var s0;

    s0 = peg$parseParenExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseComparisonExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTestExpr();
      }
    }

    return s0;
  }

  function peg$parseParenExpr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseLogicalNotOp();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseS();
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c19;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseS();
      s4 = peg$parseLogicalOrExpr();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseS();
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c20;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicalNotOp() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 33) {
      s0 = peg$c21;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseTestExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseLogicalNotOp();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseS();
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseFilterQuery();
    if (s2 === peg$FAILED) {
      s2 = peg$parseFunctionExpr();
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f27(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFilterQuery() {
    var s0;

    s0 = peg$parseRelQuery();
    if (s0 === peg$FAILED) {
      s0 = peg$parseJsonpathQuery();
    }

    return s0;
  }

  function peg$parseRelQuery() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCurrentNodeIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSegments();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f28(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCurrentNodeIdentifier() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 64) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseComparisonExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseComparable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseS();
      s3 = peg$parseComparisonOp();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseS();
        s5 = peg$parseComparable();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f29(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 === peg$FAILED) {
      s1 = peg$parseStringLiteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTrue();
        if (s1 === peg$FAILED) {
          s1 = peg$parseFalse();
          if (s1 === peg$FAILED) {
            s1 = peg$parseNull();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseComparable() {
    var s0;

    s0 = peg$parseLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSingularQuery();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFunctionExpr();
      }
    }

    return s0;
  }

  function peg$parseComparisonOp() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c23) {
      s0 = peg$c23;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c24) {
        s0 = peg$c24;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c25) {
          s0 = peg$c25;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c26) {
            s0 = peg$c26;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.charAt(peg$currPos);
            if (peg$r10.test(s0)) {
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSingularQuery() {
    var s0;

    s0 = peg$parseRelSingularQuery();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAbsSingularQuery();
    }

    return s0;
  }

  function peg$parseRelSingularQuery() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCurrentNodeIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSingularQuerySegments();
      peg$savedPos = s0;
      s0 = peg$f31(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbsSingularQuery() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRootIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSingularQuerySegments();
      peg$savedPos = s0;
      s0 = peg$f32(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingularQuerySegments() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseS();
    s4 = peg$parseNameSegment();
    if (s4 === peg$FAILED) {
      s4 = peg$parseIndexSegment();
    }
    if (s4 !== peg$FAILED) {
      s2 = s4;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseS();
      s4 = peg$parseNameSegment();
      if (s4 === peg$FAILED) {
        s4 = peg$parseIndexSegment();
      }
      if (s4 !== peg$FAILED) {
        s2 = s4;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f33(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseNameSegment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c27;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNameSelector();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c28;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f34(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c29;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMemberNameShorthand();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f35(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseIndexSegment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c27;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIndexSelector();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c28;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f36(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseint();
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c30) {
        s1 = peg$c30;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFrac();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseExp();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f37(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFrac() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c29;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseDIGIT();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseExp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c31) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r11.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$parseDIGIT();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f38(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTrue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFalse() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNull() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFunctionName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseLCALPHA();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseFunctionNameChar();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseFunctionNameChar();
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseFunctionNameChar() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r12.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parseLCALPHA() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r13.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parseFunctionExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseFunctionName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c19;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseS();
        s4 = peg$currPos;
        s5 = peg$parseFunctionArgument();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$parseS();
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c35;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parseS();
            s11 = peg$parseFunctionArgument();
            if (s11 !== peg$FAILED) {
              s7 = s11;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$parseS();
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c35;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e49); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parseS();
              s11 = peg$parseFunctionArgument();
              if (s11 !== peg$FAILED) {
                s7 = s11;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          s4 = [ s5, s6 ];
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseS();
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c20;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f42(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionArgument() {
    var s0;

    s0 = peg$parseLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFilterQuery();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFunctionExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLogicalOrExpr();
        }
      }
    }

    return s0;
  }

  function peg$parseSegment() {
    var s0;

    s0 = peg$parseChildSegement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDescendantSegment();
    }

    return s0;
  }

  function peg$parseChildSegement() {
    var s0, s1, s2;

    s0 = peg$parseBracketedSelection();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c29;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWildcardSelector();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMemberNameShorthand();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBracketedSelection() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c27;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseS();
      s3 = peg$parseSelector();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseS();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c35;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseS();
          s9 = peg$parseSelector();
          if (s9 !== peg$FAILED) {
            s5 = s9;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseS();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c35;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseS();
            s9 = peg$parseSelector();
            if (s9 !== peg$FAILED) {
              s5 = s9;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parseS();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c28;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMemberNameShorthand() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNameFirst();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseNameChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseNameChar();
      }
      peg$savedPos = s0;
      s0 = peg$f45();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNameFirst() {
    var s0, s1, s2, s3;

    s0 = peg$parseALPHA();
    if (s0 === peg$FAILED) {
      s0 = input.charAt(peg$currPos);
      if (peg$r14.test(s0)) {
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = input.charAt(peg$currPos);
        if (peg$r2.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s2 !== peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseNameChar() {
    var s0;

    s0 = peg$parseDIGIT();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNameFirst();
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r15.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseALPHA() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r16.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseDescendantSegment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBracketedSelection();
      if (s2 === peg$FAILED) {
        s2 = peg$parseWildcardSelector();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMemberNameShorthand();
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f46(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  StartRules: ["JsonpathQuery"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
