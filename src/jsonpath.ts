/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";


// @ts-ignore
  function buildLogicalExpression(head, tail): FilterExpression {
// @ts-ignore
    return tail.reduce(function(result, element) {
// @ts-ignore
      return {
// @ts-ignore
        type: "LogicalBinary",
// @ts-ignore
        operator: element[1],
// @ts-ignore
        left: result,
// @ts-ignore
        right: element[3]
      };
// @ts-ignore
    }, head);
  }

// @ts-ignore
  function buildUnaryExpression(not, query): TestExpression {
// @ts-ignore
    if (not) {
// @ts-ignore
      return {
// @ts-ignore
        type: "LogicalUnary",
// @ts-ignore
        operator: "!",
// @ts-ignore
        expr: query
      };
// @ts-ignore
    } else {
// @ts-ignore
      return query;
    }
  }

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { JsonpathQuery: peg$parseJsonpathQuery };
// @ts-ignore
  var peg$startRuleFunction = peg$parseJsonpathQuery;

// @ts-ignore
  var peg$c0 = " ";
  var peg$c1 = "\t";
  var peg$c2 = "\n";
  var peg$c3 = "\r";
  var peg$c4 = "$";
  var peg$c5 = "\"";
  var peg$c6 = "'";
  var peg$c7 = "\\";
  var peg$c8 = "b";
  var peg$c9 = "f";
  var peg$c10 = "n";
  var peg$c11 = "r";
  var peg$c12 = "t";
  var peg$c13 = "/";
  var peg$c14 = "u";
  var peg$c15 = "D";
  var peg$c16 = "*";
  var peg$c17 = "0";
  var peg$c18 = "-";
  var peg$c19 = ":";
  var peg$c20 = "?";
  var peg$c21 = "||";
  var peg$c22 = "&&";
  var peg$c23 = "(";
  var peg$c24 = ")";
  var peg$c25 = "!";
  var peg$c26 = "@";
  var peg$c27 = "==";
  var peg$c28 = "!=";
  var peg$c29 = "<=";
  var peg$c30 = ">=";
  var peg$c31 = "<";
  var peg$c32 = ">";
  var peg$c33 = "[";
  var peg$c34 = "]";
  var peg$c35 = ".";
  var peg$c36 = "-0";
  var peg$c37 = "e";
  var peg$c38 = "true";
  var peg$c39 = "false";
  var peg$c40 = "null";
  var peg$c41 = "_";
  var peg$c42 = ",";
  var peg$c43 = "..";

  var peg$r0 = /^[ -!#-&(-[\]-\u10FFFF]/;
  var peg$r1 = /^[ABCEF]/;
  var peg$r2 = /^[0-7]/;
  var peg$r3 = /^[89AB]/;
  var peg$r4 = /^[CDEF]/;
  var peg$r5 = /^[ABCDEF]/;
  var peg$r6 = /^[1-9]/;
  var peg$r7 = /^[\-+]/;
  var peg$r8 = /^[a-z]/;
  var peg$r9 = /^[\x80-\u10FFFF]/;
  var peg$r10 = /^[0-9]/;
  var peg$r11 = /^[a-z]/i;

  var peg$e0 = peg$literalExpectation(" ", false);
  var peg$e1 = peg$literalExpectation("\t", false);
  var peg$e2 = peg$literalExpectation("\n", false);
  var peg$e3 = peg$literalExpectation("\r", false);
  var peg$e4 = peg$literalExpectation("$", false);
  var peg$e5 = peg$literalExpectation("\"", false);
  var peg$e6 = peg$literalExpectation("'", false);
  var peg$e7 = peg$literalExpectation("\\", false);
  var peg$e8 = peg$classExpectation([[" ", "!"], ["#", "&"], ["(", "["], ["]", "\u10FF"], "F", "F"], false, false);
  var peg$e9 = peg$literalExpectation("b", false);
  var peg$e10 = peg$literalExpectation("f", false);
  var peg$e11 = peg$literalExpectation("n", false);
  var peg$e12 = peg$literalExpectation("r", false);
  var peg$e13 = peg$literalExpectation("t", false);
  var peg$e14 = peg$literalExpectation("/", false);
  var peg$e15 = peg$literalExpectation("u", false);
  var peg$e16 = peg$classExpectation(["A", "B", "C", "E", "F"], false, false);
  var peg$e17 = peg$literalExpectation("D", false);
  var peg$e18 = peg$classExpectation([["0", "7"]], false, false);
  var peg$e19 = peg$classExpectation(["8", "9", "A", "B"], false, false);
  var peg$e20 = peg$classExpectation(["C", "D", "E", "F"], false, false);
  var peg$e21 = peg$classExpectation(["A", "B", "C", "D", "E", "F"], false, false);
  var peg$e22 = peg$literalExpectation("*", false);
  var peg$e23 = peg$literalExpectation("0", false);
  var peg$e24 = peg$literalExpectation("-", false);
  var peg$e25 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e26 = peg$literalExpectation(":", false);
  var peg$e27 = peg$literalExpectation("?", false);
  var peg$e28 = peg$literalExpectation("||", false);
  var peg$e29 = peg$literalExpectation("&&", false);
  var peg$e30 = peg$literalExpectation("(", false);
  var peg$e31 = peg$literalExpectation(")", false);
  var peg$e32 = peg$literalExpectation("!", false);
  var peg$e33 = peg$literalExpectation("@", false);
  var peg$e34 = peg$literalExpectation("==", false);
  var peg$e35 = peg$literalExpectation("!=", false);
  var peg$e36 = peg$literalExpectation("<=", false);
  var peg$e37 = peg$literalExpectation(">=", false);
  var peg$e38 = peg$literalExpectation("<", false);
  var peg$e39 = peg$literalExpectation(">", false);
  var peg$e40 = peg$literalExpectation("[", false);
  var peg$e41 = peg$literalExpectation("]", false);
  var peg$e42 = peg$literalExpectation(".", false);
  var peg$e43 = peg$literalExpectation("-0", false);
  var peg$e44 = peg$literalExpectation("e", true);
  var peg$e45 = peg$classExpectation(["-", "+"], false, false);
  var peg$e46 = peg$literalExpectation("true", false);
  var peg$e47 = peg$literalExpectation("false", false);
  var peg$e48 = peg$literalExpectation("null", false);
  var peg$e49 = peg$literalExpectation("_", false);
  var peg$e50 = peg$classExpectation([["a", "z"]], false, false);
  var peg$e51 = peg$literalExpectation(",", false);
  var peg$e52 = peg$classExpectation([["\x80", "\u10FF"], "F", "F"], false, false);
  var peg$e53 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e54 = peg$classExpectation([["a", "z"]], false, true);
  var peg$e55 = peg$literalExpectation("..", false);
// @ts-ignore

  var peg$f0 = function(segments) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "Root", 
// @ts-ignore
        segments: segments
// @ts-ignore
      } as Root;
    };// @ts-ignore

  var peg$f1 = function(literal) {
// @ts-ignore
  return { 
// @ts-ignore
    type: "NameSelector",
// @ts-ignore
    member: literal
  }; 
};// @ts-ignore

  var peg$f2 = function(literals) {// @ts-ignore
 return literals.join(''); };// @ts-ignore

  var peg$f3 = function(literals) {// @ts-ignore
 return literals.join(''); };// @ts-ignore

  var peg$f4 = function() {// @ts-ignore
 return "\b"};// @ts-ignore

  var peg$f5 = function() {// @ts-ignore
 return "\f"};// @ts-ignore

  var peg$f6 = function() {// @ts-ignore
 return "\n"};// @ts-ignore

  var peg$f7 = function() {// @ts-ignore
 return "\r"};// @ts-ignore

  var peg$f8 = function() {// @ts-ignore
 return "\t"};// @ts-ignore

  var peg$f9 = function() {// @ts-ignore
 return "/"};// @ts-ignore

  var peg$f10 = function() {// @ts-ignore
 return "\\"};// @ts-ignore

  var peg$f11 = function(chars) {// @ts-ignore
 return String.fromCharCode(...chars); };// @ts-ignore

  var peg$f12 = function(code) {// @ts-ignore
 return [code]; };// @ts-ignore

  var peg$f13 = function(pair) {// @ts-ignore
 return pair; };// @ts-ignore

  var peg$f14 = function() {// @ts-ignore
 return parseInt(text(), 16); };// @ts-ignore

  var peg$f15 = function() {// @ts-ignore
 return parseInt(text(), 16); };// @ts-ignore

  var peg$f16 = function() {// @ts-ignore
 return parseInt(text(), 16); };// @ts-ignore

  var peg$f17 = function() {// @ts-ignore
 return parseInt(text(), 16); };// @ts-ignore

  var peg$f18 = function() {// @ts-ignore
 return { type: "WildcardSelector" } };// @ts-ignore

  var peg$f19 = function(index) {// @ts-ignore
 return { type: "IndexSelector", index: index } };// @ts-ignore

  var peg$f20 = function() {// @ts-ignore
 return 0; };// @ts-ignore

  var peg$f21 = function() {// @ts-ignore
 return parseInt(text()); };// @ts-ignore

  var peg$f22 = function(start, end, step) {
// @ts-ignore
  return {
// @ts-ignore
    type: "SliceSelector",
// @ts-ignore
    start: start,
// @ts-ignore
    end: end,
// @ts-ignore
    step: step
  }
};// @ts-ignore

  var peg$f23 = function(expr) {// @ts-ignore
 return { type: "FilterSelector", expr: expr } };// @ts-ignore

  var peg$f24 = function(head, tail) {
// @ts-ignore
  return buildLogicalExpression(head, tail);
};// @ts-ignore

  var peg$f25 = function(head, tail) {
// @ts-ignore
  return buildLogicalExpression(head, tail);
};// @ts-ignore

  var peg$f26 = function(not, expr) {
// @ts-ignore
  if (not) {
// @ts-ignore
    return {
// @ts-ignore
      type: "LogicalUnary",
// @ts-ignore
      operator: "!",
// @ts-ignore
      expr: expr
// @ts-ignore
    } as LogicalNot;
  }

// @ts-ignore
  return expr;
};// @ts-ignore

  var peg$f27 = function(not, query) {
// @ts-ignore
  return buildUnaryExpression(not, {
// @ts-ignore
    type: "TestExpr",
// @ts-ignore
    query: query,
  });
};// @ts-ignore

  var peg$f28 = function(segments) {
// @ts-ignore
  return {
// @ts-ignore
    type: 'CurrentNode',
// @ts-ignore
    segments: segments
  }
};// @ts-ignore

  var peg$f29 = function(left, op, right) {
// @ts-ignore
  return {
// @ts-ignore
    type: "ComparisonExpr",
// @ts-ignore
    left: left,
// @ts-ignore
    operator: op,
// @ts-ignore
    right: right
  }
};// @ts-ignore

  var peg$f30 = function(literal) {
// @ts-ignore
  return {
// @ts-ignore
    type: "Literal",
// @ts-ignore
    member: literal
  }
};// @ts-ignore

  var peg$f31 = function(segments) {
// @ts-ignore
  return {
// @ts-ignore
    type: 'CurrentNode',
// @ts-ignore
    segments: segments
  }
};// @ts-ignore

  var peg$f32 = function(segments) {
// @ts-ignore
  return { 
// @ts-ignore
    type: "Root",
// @ts-ignore
    segments: segments
// @ts-ignore
  } as Root
};// @ts-ignore

  var peg$f33 = function(segment) {
// @ts-ignore
  return segment;
};// @ts-ignore

  var peg$f34 = function(selector) {// @ts-ignore
 return [selector]; };// @ts-ignore

  var peg$f35 = function(selector) {// @ts-ignore
 return [selector]; };// @ts-ignore

  var peg$f36 = function(selector) {// @ts-ignore
 return [selector]; };// @ts-ignore

  var peg$f37 = function(int, frac, exp) {
// @ts-ignore
  return parseFloat(`${int}${frac ?? ''}${exp ? `e${exp}` : ''}`);
};// @ts-ignore

  var peg$f38 = function(sign, digits) {
// @ts-ignore
  return parseInt(`${sign || ''}${digits.join('')}`);
};// @ts-ignore

  var peg$f39 = function() {
// @ts-ignore
  return true;
};// @ts-ignore

  var peg$f40 = function() {
// @ts-ignore
  return false;
};// @ts-ignore

  var peg$f41 = function() {
// @ts-ignore
  return null;
};// @ts-ignore

  var peg$f42 = function(name, args) {
// @ts-ignore
  const head = args[0];
// @ts-ignore
  const tail = args[1];
// @ts-ignore
  return {
// @ts-ignore
    type: "FunctionExpr",
// @ts-ignore
    name: name,
// @ts-ignore
    args: [head].concat(tail)
// @ts-ignore
  } as {
// @ts-ignore
    type: "FunctionExpr",
// @ts-ignore
    name: string,
// @ts-ignore
    args: FunctionArgument[]
  };
};// @ts-ignore

  var peg$f43 = function(selector) {// @ts-ignore
 return [selector]; };// @ts-ignore

  var peg$f44 = function(head, tail) {
// @ts-ignore
  return [head].concat(tail);
};// @ts-ignore

  var peg$f45 = function() { 
// @ts-ignore
  return { 
// @ts-ignore
    type: "MemberNameShorthand",
// @ts-ignore
    member: text()
  };
};// @ts-ignore

  var peg$f46 = function(selectors) {
// @ts-ignore
  if (Array.isArray(selectors)) {
// @ts-ignore
    return {
// @ts-ignore
      type: "DescendantSegment",
// @ts-ignore
      selectors: selectors
    };
// @ts-ignore
  } else {
// @ts-ignore
    return {
// @ts-ignore
      type: "DescendantSegment",
// @ts-ignore
      selectors: [selectors]
    };
  }
};
// @ts-ignore
  var peg$currPos = 0;
// @ts-ignore
  var peg$savedPos = 0;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = 0;
// @ts-ignore
  var peg$maxFailExpected = [];
// @ts-ignore
  var peg$silentFails = 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if ("startRule" in options) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      p = pos - 1;
// @ts-ignore
      while (!peg$posDetailsCache[p]) {
// @ts-ignore
        p--;
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parseJsonpathQuery() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRootIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSegments();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f0(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSegments() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseS();
// @ts-ignore
    s3 = peg$parseSegment();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s1 = s3;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      s2 = peg$parseS();
// @ts-ignore
      s3 = peg$parseSegment();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseS() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parseB();
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$parseB();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseB() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 32) {
// @ts-ignore
      s0 = peg$c0;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 9) {
// @ts-ignore
        s0 = peg$c1;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
          s0 = peg$c2;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 13) {
// @ts-ignore
            s0 = peg$c3;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRootIdentifier() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
      s0 = peg$c4;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSelector() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseNameSelector();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseWildcardSelector();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseSliceSelector();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseIndexSelector();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseFilterSelector();
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNameSelector() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseStringLiteral();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f1(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStringLiteral() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c5;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseDoubleQuoted();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseDoubleQuoted();
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s3 = peg$c5;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f2(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
        s1 = peg$c6;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = [];
// @ts-ignore
        s3 = peg$parseSingleQuoted();
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$parseSingleQuoted();
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s3 = peg$c6;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f3(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDoubleQuoted() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$parseUnescaped();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
        s0 = peg$c6;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseESC();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
            s2 = peg$c5;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s0 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseESC();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parseEscapable();
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              s0 = s2;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSingleQuoted() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$parseUnescaped();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s0 = peg$c5;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseESC();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
            s2 = peg$c6;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s0 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseESC();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parseEscapable();
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              s0 = s2;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseESC() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
      s0 = peg$c7;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnescaped() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEscapable() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 98) {
// @ts-ignore
      s1 = peg$c8;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f4();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 102) {
// @ts-ignore
        s1 = peg$c9;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f5();
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 110) {
// @ts-ignore
          s1 = peg$c10;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f6();
        }
// @ts-ignore
        s0 = s1;
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 114) {
// @ts-ignore
            s1 = peg$c11;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f7();
          }
// @ts-ignore
          s0 = s1;
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 116) {
// @ts-ignore
              s1 = peg$c12;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s1 = peg$f8();
            }
// @ts-ignore
            s0 = s1;
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
                s1 = peg$c13;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s1 = peg$f9();
              }
// @ts-ignore
              s0 = s1;
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
                  s1 = peg$c7;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s1 = peg$f10();
                }
// @ts-ignore
                s0 = s1;
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$currPos;
// @ts-ignore
                  s1 = peg$currPos;
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 117) {
// @ts-ignore
                    s2 = peg$c14;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s2 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                  }
// @ts-ignore
                  if (s2 !== peg$FAILED) {
// @ts-ignore
                    s3 = peg$parseHexchar();
// @ts-ignore
                    if (s3 !== peg$FAILED) {
// @ts-ignore
                      s1 = s3;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s1;
// @ts-ignore
                      s1 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s1;
// @ts-ignore
                    s1 = peg$FAILED;
                  }
// @ts-ignore
                  if (s1 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s1 = peg$f11(s1);
                  }
// @ts-ignore
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseHexchar() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseNonSurrogate();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f12(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      s2 = peg$parseHighSurrogate();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
          s3 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 117) {
// @ts-ignore
            s4 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parseLowSurrogate();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s1 = [ s2, s5 ];
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s1;
// @ts-ignore
              s1 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f13(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNonSurrogate() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseDIGIT();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$parseHEXDIG();
// @ts-ignore
      while (s5 !== peg$FAILED) {
// @ts-ignore
        s4.push(s5);
// @ts-ignore
        if (s4.length >= 3) {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$parseHEXDIG();
        }
      }
// @ts-ignore
      if (s4.length < 3) {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = s4;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f14();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 68) {
// @ts-ignore
        s2 = peg$c15;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          s5 = [];
// @ts-ignore
          s6 = peg$parseHEXDIG();
// @ts-ignore
          while (s6 !== peg$FAILED) {
// @ts-ignore
            s5.push(s6);
// @ts-ignore
            if (s5.length >= 2) {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$parseHEXDIG();
            }
          }
// @ts-ignore
          if (s5.length < 2) {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = s5;
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3, s4];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f15();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseHighSurrogate() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 68) {
// @ts-ignore
      s1 = peg$c15;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$parseHEXDIG();
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          if (s4.length >= 2) {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$parseHEXDIG();
          }
        }
// @ts-ignore
        if (s4.length < 2) {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = s4;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f16();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLowSurrogate() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 68) {
// @ts-ignore
      s1 = peg$c15;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$parseHEXDIG();
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          if (s4.length >= 2) {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$parseHEXDIG();
          }
        }
// @ts-ignore
        if (s4.length < 2) {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = s4;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f17();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseHEXDIG() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseDIGIT();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s0 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWildcardSelector() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
      s1 = peg$c16;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f18();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIndexSelector() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseint();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f19(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseint() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 48) {
// @ts-ignore
      s1 = peg$c17;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f20();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
        s2 = peg$c18;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = peg$parseDIGIT1();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$parseDIGIT();
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$parseDIGIT();
        }
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f21();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDIGIT1() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSliceSelector() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseint();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseS();
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
      s2 = peg$c19;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseS();
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseint();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseS();
// @ts-ignore
        s4 = s5;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s6 = peg$c19;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$currPos;
// @ts-ignore
        s8 = peg$parseS();
// @ts-ignore
        s9 = peg$parseint();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s7 = s9;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s7;
// @ts-ignore
          s7 = peg$FAILED;
        }
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s5 = s7;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f22(s1, s4, s5);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFilterSelector() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
      s1 = peg$c20;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseS();
// @ts-ignore
      s3 = peg$parseLogicalOrExpr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f23(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalOrExpr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicalAndExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseS();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c21) {
// @ts-ignore
        s5 = peg$c21;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseS();
// @ts-ignore
        s7 = peg$parseLogicalAndExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parseS();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c21) {
// @ts-ignore
          s5 = peg$c21;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseS();
// @ts-ignore
          s7 = peg$parseLogicalAndExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f24(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalAndExpr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBasicExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseS();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c22) {
// @ts-ignore
        s5 = peg$c22;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseS();
// @ts-ignore
        s7 = peg$parseBasicExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parseS();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c22) {
// @ts-ignore
          s5 = peg$c22;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseS();
// @ts-ignore
          s7 = peg$parseBasicExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f25(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBasicExpr() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseParenExpr();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseComparisonExpr();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseTestExpr();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseParenExpr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseLogicalNotOp();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseS();
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s2 = peg$c23;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseS();
// @ts-ignore
      s4 = peg$parseLogicalOrExpr();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseS();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s6 = peg$c24;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f26(s1, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalNotOp() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
      s0 = peg$c25;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTestExpr() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseLogicalNotOp();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseS();
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parseFilterQuery();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseFunctionExpr();
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f27(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFilterQuery() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseRelQuery();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseJsonpathQuery();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelQuery() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseCurrentNodeIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSegments();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f28(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCurrentNodeIdentifier() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 64) {
// @ts-ignore
      s0 = peg$c26;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseComparisonExpr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseComparable();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseS();
// @ts-ignore
      s3 = peg$parseComparisonOp();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseS();
// @ts-ignore
        s5 = peg$parseComparable();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f29(s1, s3, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLiteral() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseNumber();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseStringLiteral();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseTrue();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseFalse();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseNull();
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f30(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseComparable() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseLiteral();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseSingularQuery();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseFunctionExpr();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseComparisonOp() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c27) {
// @ts-ignore
      s0 = peg$c27;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c28) {
// @ts-ignore
        s0 = peg$c28;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c29) {
// @ts-ignore
          s0 = peg$c29;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c30) {
// @ts-ignore
            s0 = peg$c30;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
              s0 = peg$c31;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
                s0 = peg$c32;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e39); }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSingularQuery() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseRelSingularQuery();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseAbsSingularQuery();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelSingularQuery() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseCurrentNodeIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSingularQuerySegments();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f31(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAbsSingularQuery() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRootIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSingularQuerySegments();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f32(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSingularQuerySegments() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parseS();
// @ts-ignore
    s4 = peg$parseNameSegment();
// @ts-ignore
    if (s4 === peg$FAILED) {
// @ts-ignore
      s4 = peg$parseIndexSegment();
    }
// @ts-ignore
    if (s4 !== peg$FAILED) {
// @ts-ignore
      s2 = s4;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parseS();
// @ts-ignore
      s4 = peg$parseNameSegment();
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = peg$parseIndexSegment();
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s2 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f33(s1);
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNameSegment() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c33;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseNameSelector();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
          s3 = peg$c34;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f34(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s1 = peg$c35;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parseMemberNameShorthand();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f35(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIndexSegment() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c33;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseIndexSelector();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
          s3 = peg$c34;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f36(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNumber() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseint();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c36) {
// @ts-ignore
        s1 = peg$c36;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseFrac();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = peg$parseExp();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f37(s1, s2, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFrac() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
      s2 = peg$c35;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseDIGIT();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseDIGIT();
        }
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExp() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c37) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (peg$r7.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseDIGIT();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseDIGIT();
        }
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f38(s2, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTrue() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c38) {
// @ts-ignore
      s1 = peg$c38;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f39();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFalse() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c39) {
// @ts-ignore
      s1 = peg$c39;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f40();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNull() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c40) {
// @ts-ignore
      s1 = peg$c40;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f41();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionName() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseLCALPHA();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseFunctionNameChar();
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$parseFunctionNameChar();
      }
// @ts-ignore
      s2 = [s2, s3];
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionNameChar() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseLCALPHA();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
        s0 = peg$c41;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseDIGIT();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLCALPHA() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r8.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionExpr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseFunctionName();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s2 = peg$c23;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseS();
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseFunctionArgument();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = [];
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          s8 = peg$parseS();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
            s9 = peg$c42;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e51); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parseS();
// @ts-ignore
            s11 = peg$parseFunctionArgument();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s7 = s11;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          while (s7 !== peg$FAILED) {
// @ts-ignore
            s6.push(s7);
// @ts-ignore
            s7 = peg$currPos;
// @ts-ignore
            s8 = peg$parseS();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
              s9 = peg$c42;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e51); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parseS();
// @ts-ignore
              s11 = peg$parseFunctionArgument();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s7 = s11;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s7;
// @ts-ignore
                s7 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
          }
// @ts-ignore
          s4 = [ s5, s6 ];
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parseS();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s6 = peg$c24;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f42(s1, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionArgument() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseLiteral();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseFilterQuery();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseFunctionExpr();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseLogicalOrExpr();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSegment() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseChildSegement();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseDescendantSegment();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseChildSegement() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$parseBracketedSelection();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s1 = peg$c35;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parseWildcardSelector();
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = peg$parseMemberNameShorthand();
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f43(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBracketedSelection() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c33;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseS();
// @ts-ignore
      s3 = peg$parseSelector();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parseS();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s7 = peg$c42;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseS();
// @ts-ignore
          s9 = peg$parseSelector();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s5 = s9;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          s6 = peg$parseS();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
            s7 = peg$c42;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e51); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseS();
// @ts-ignore
            s9 = peg$parseSelector();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s5 = s9;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
// @ts-ignore
        s5 = peg$parseS();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
          s6 = peg$c34;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f44(s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMemberNameShorthand() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseNameFirst();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseNameChar();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseNameChar();
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f45();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNameFirst() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseALPHA();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
        s0 = peg$c41;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s0 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNameChar() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseDIGIT();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseNameFirst();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDIGIT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseALPHA() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r11.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDescendantSegment() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c43) {
// @ts-ignore
      s1 = peg$c43;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseBracketedSelection();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseWildcardSelector();
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = peg$parseMemberNameShorthand();
        }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f46(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "JsonpathQuery";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "JsonpathQuery" ? JsonpathQuery : JsonpathQuery
    : JsonpathQuery;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type JsonpathQuery = Root;
export type Segments = Segment[];
export type S = B[];
export type B = " " | "\t" | "\n" | "\r";
export type RootIdentifier = "$";
export type Selector =
  | NameSelector
  | WildcardSelector
  | SliceSelector
  | IndexSelector
  | FilterSelector;
export type NameSelector = { type: "NameSelector"; member: StringLiteral };
export type StringLiteral = string;
export type DoubleQuoted = Unescaped | "'" | '"' | Escapable;
export type SingleQuoted = Unescaped | '"' | "'" | Escapable;
export type ESC = "\\";
export type Unescaped = string;
export type Escapable = "\b" | "\f" | "\n" | "\r" | "\t" | "/" | "\\" | string;
export type Hexchar = [NonSurrogate] | HighSurrogate;
export type NonSurrogate = number;
export type HighSurrogate = number;
export type LowSurrogate = number;
export type HEXDIG = DIGIT | string;
export type WildcardSelector = { type: "WildcardSelector" };
export type IndexSelector = { type: "IndexSelector"; index: Int };
export type Int = 0 | number;
export type DIGIT1 = string;
export type SliceSelector = {
  type: "SliceSelector";
  start: Int | null;
  end: Int | null;
  step: (Int | null) | null;
};
export type FilterSelector = { type: "FilterSelector"; expr: LogicalOrExpr };
export type LogicalOrExpr = FilterExpression;
export type LogicalAndExpr = FilterExpression;
export type BasicExpr = ParenExpr | ComparisonExpr | TestExpr;
export type ParenExpr = any;
export type LogicalNotOp = "!";
export type TestExpr = TestExpression;
export type FilterQuery = RelQuery | JsonpathQuery;
export type RelQuery = { type: "CurrentNode"; segments: Segments };
export type CurrentNodeIdentifier = "@";
export type ComparisonExpr = {
  type: "ComparisonExpr";
  left: Comparable;
  operator: ComparisonOp;
  right: Comparable;
};
export type Literal = {
  type: "Literal";
  member: Number_1 | StringLiteral | True | False | Null;
};
export type Comparable = Literal | SingularQuery | FunctionExpr;
export type ComparisonOp = "==" | "!=" | "<=" | ">=" | "<" | ">";
export type SingularQuery = RelSingularQuery | AbsSingularQuery;
export type RelSingularQuery = {
  type: "CurrentNode";
  segments: SingularQuerySegments;
};
export type AbsSingularQuery = Root;
export type SingularQuerySegments = (NameSegment | IndexSegment)[];
export type NameSegment = [NameSelector] | [MemberNameShorthand];
export type IndexSegment = [IndexSelector];
export type Number_1 = number;
export type Frac = string;
export type Exp = number;
export type True = boolean;
export type False = boolean;
export type Null = null;
export type FunctionName = string;
export type FunctionNameChar = LCALPHA | "_" | DIGIT;
export type LCALPHA = string;
export type FunctionExpr = {
  type: "FunctionExpr";
  name: string;
  args: FunctionArgument[];
};
export type FunctionArgument =
  | Literal
  | FilterQuery
  | FunctionExpr
  | LogicalOrExpr;
export type Segment = ChildSegement | DescendantSegment;
export type ChildSegement =
  | BracketedSelection
  | [WildcardSelector | MemberNameShorthand];
export type BracketedSelection = Selector[];
export type MemberNameShorthand = {
  type: "MemberNameShorthand";
  member: string;
};
export type NameFirst = ALPHA | "_" | string;
export type NameChar = DIGIT | NameFirst;
export type DIGIT = string;
export type ALPHA = string;
export type DescendantSegment =
  | {
      type: string;
      selectors: (BracketedSelection | WildcardSelector | MemberNameShorthand) &
        any[];
    }
  | {
      type: string;
      selectors: (
        | BracketedSelection
        | WildcardSelector
        | MemberNameShorthand
      )[];
    };


// Footer
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck

export type Root = {
  type: "Root";
  segments: Segments;
};

export type CurrentNode = RelQuery | RelSingularQuery;

// for 2.3.5. Filter Selector
export type FilterExpression = LogicalExpression | ComparisonExpr | TestExpr;
export type TestExpression = LogicalBinary | TestFilterExpr;
export type TestFilterExpr = {
  type: "TestExpr";
  query: FilterQuery | FunctionExpr;
};

export type LogicalExpression = LogicalBinary | LogicalUnary;

export type LogicalBinary = LogicalAnd | LogicalOr;

export interface LogicalOr {
  type: "LogicalBinary";
  operator: "||";
  left: FilterExpression;
  right: FilterExpression;
}

export interface LogicalAnd {
  type: "LogicalBinary";
  operator: "&&";
  left: FilterExpression;
  right: FilterExpression;
}

export type LogicalUnary = LogicalNot;

export interface LogicalNot {
  type: "LogicalUnary";
  operator: "!";
  expr: FilterExpression;
}

